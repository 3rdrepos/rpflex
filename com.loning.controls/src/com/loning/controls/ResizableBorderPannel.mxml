<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
				   xmlns:s="library://ns.adobe.com/flex/spark"
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   xmlns:resize="flex.utils.spark.resize.*"
				   width="400" height="300" backgroundAlpha="0.4" backgroundColor="#E5E5E5"
				   borderColor="#00FF48" borderWeight="2" contentBackgroundAlpha="0.1"
				   contentBackgroundColor="#DCDCDC" cornerRadius="17"
				   creationComplete="bordercontainer1_creationCompleteHandler(event)"
				   dropShadowVisible="true">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		@namespace resize "flex.utils.spark.resize.*";
		
	</fx:Style>
	<s:Image id="resizer" right="-3" bottom="-4" width="48" height="48" source="@Embed('assets/expand.png')"/>
	<s:Image id="closer" right="-2" top="-3" width="48" height="48"
			 click="closer_clickHandler(event)" source="@Embed('assets/close.png')"/>
	<fx:Script>
		<![CDATA[
			import flex.utils.spark.resize.MoveManager;
			import flex.utils.spark.resize.ResizeManager;
			
			import mx.events.FlexEvent;
			
			[Bindable]
			public var resizeManager:ResizeManager;
			
			[Bindable]
			public var moveManager:MoveManager;
			
			
			
			override protected function createChildren():void{
				
				//resizer.height=10;
				//resizer.width = 10;
				super.createChildren();
				//resizer.addEventListener(MouseEvent.MOUSE_DOWN, resizeDown);
				//rawChildren.addChild(resizer);
			}
			override protected function updateDisplayList(w:Number, h:Number):void{
				super.updateDisplayList(w,h);
				//resizer.y = h - resizer.height;
				//resizer.x = w - resizer.width;
			}
			private function resizeDown(e:MouseEvent):void{
				trace("down");
				scalePanel(e);
				stage.addEventListener(MouseEvent.MOUSE_MOVE, scalePanel);
				stage.addEventListener(MouseEvent.MOUSE_UP, stopScale);
			}
			private function scalePanel(e:MouseEvent):void{
				
				var stagepoint:Point = this.localToGlobal(new Point());
				var mouseGlobal:Point=this.localToGlobal(
					new Point(this.mouseX,this.mouseY));
				trace("scale",stagepoint.x,mouseGlobal.x);
				
				var w:int=mouseGlobal.x -stagepoint.x;
				var h:int=mouseGlobal.y -stagepoint.y;
				width=w>0?w:0;
				height=h>0?h:0;
				//width=this.mouseX>0?e.stageX-stagepoint.x+ resizer.width:0;
				//height=e.stageY-stagepoint.y+ resizer.height>0?e.stageY-stagepoint.y+ resizer.height:0;
				
			}
			private function stopScale(e:MouseEvent):void{
				trace("up");
				stage.removeEventListener(MouseEvent.MOUSE_MOVE, scalePanel);
				stage.removeEventListener(MouseEvent.MOUSE_UP, stopScale);
			}
			
			protected function bordercontainer1_creationCompleteHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				resizeManager = new ResizeManager(this, this.resizer);
				moveManager = new MoveManager(this, this);
				
			}
			
			protected function closer_clickHandler(event:MouseEvent):void
			{
				trace("close",this);
				// TODO Auto-generated method stub
				this.dispatchEvent(
					new Event(Event.CLOSE));
			}
			
		]]>
	</fx:Script>
</s:BorderContainer>
